// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");

// Declare few constants and assign a few sample accounts generated by ganache-cli
const emptyAddress = "0x00000000000000000000000000000000000000";
var sku = 1;
var upc = 1;
var ownerID = emptyAddress;
var originFarmerID = emptyAddress;
const originFarmName = "John Doe";
const originFarmInformation = "Yarray Valley";
const originFarmLatitude = "-38.239770";
const originFarmLongitude = "144.341490";
var productID = sku + upc;
const productNotes = "Best beans for Espresso";
const productPrice = web3.utils.toWei("1", "ether");
var itemState = 0;
var distributorID = emptyAddress;
var retailerID = emptyAddress;
var consumerID = emptyAddress;

contract("SupplyChain", function (acc) {
  accounts = acc;
  ownerID = accounts[0];
  originFarmerID = accounts[1];
  distributorID = accounts[2];
  retailerID = accounts[3];
  consumerID = accounts[4];

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", ownerID);
  console.log("Farmer: accounts[1] ", originFarmerID);
  console.log("Distributor: accounts[2] ", distributorID);
  console.log("Retailer: accounts[3] ", retailerID);
  console.log("Consumer: accounts[4] ", consumerID);
});

beforeEach(async () => {
  supplyChain = await SupplyChain.deployed();
});

// 1st Test
it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
  // Declare and Initialize a variable for event
  var eventEmitted = false;

  await supplyChain.addFarmer(originFarmerID);

  // Watch the emitted event Harvested()
  supplyChain.Harvested((err, res) => (eventEmitted = true));
  // await event.watch((err, res) => {
  //   eventEmitted = true;
  // });

  // Mark an item as Harvested by calling function harvestItem()
  await supplyChain.harvestItem(
    upc,
    originFarmerID,
    originFarmName,
    originFarmInformation,
    originFarmLatitude,
    originFarmLongitude,
    productNotes,
    { from: originFarmerID }
  );
  itemState = 0;

  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
  const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

  // Verify the result set
  assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
  assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
  assert.equal(
    resultBufferOne[2],
    ownerID,
    "Error: Missing or Invalid ownerID"
  );
  assert.equal(
    resultBufferOne[3],
    originFarmerID,
    "Error: Missing or Invalid originFarmerID"
  );
  assert.equal(
    resultBufferOne[4],
    originFarmName,
    "Error: Missing or Invalid originFarmName"
  );
  assert.equal(
    resultBufferOne[5],
    originFarmInformation,
    "Error: Missing or Invalid originFarmInformation"
  );
  assert.equal(
    resultBufferOne[6],
    originFarmLatitude,
    "Error: Missing or Invalid originFarmLatitude"
  );
  assert.equal(
    resultBufferOne[7],
    originFarmLongitude,
    "Error: Missing or Invalid originFarmLongitude"
  );
  assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item State");
  assert.equal(eventEmitted, true, "Invalid event emitted");
});

// 2nd Test
it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
  // Declare and Initialize a variable for event
  let eventEmitted = false;
  // Watch the emitted event Processed()
  await supplyChain.Processed((err, res) => (eventEmitted = true));
  // Mark an item as Processed by calling function processtItem()
  await supplyChain.processItem(upc, { from: originFarmerID });
  itemState = 1;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[5], itemState, "Error: Invalid item State");
  assert.equal(eventEmitted, true, "Error: Harvested event not emitted");
});

// 3rd Test
it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
  // Declare and Initialize a variable for event
  let eventEmitted = false;
  // Watch the emitted event Packed()
  await supplyChain.Packed((acc, res) => (eventEmitted = true));
  // Mark an item as Packed by calling function packItem()
  await supplyChain.packItem(upc, { from: originFarmerID });
  itemState = 2;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[5], itemState, "Error: Invalid item state");
  assert.equal(eventEmitted, true, "Error: Packed event not emitted");
});

// 4th Test
it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
  // Declare and Initialize a variable for event
  let eventEmitted = false;
  // Watch the emitted event ForSale()
  await supplyChain.ForSale((err, res) => (eventEmitted = true));
  // Mark an item as ForSale by calling function sellItem()
  await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
  itemState = 3;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[4], productPrice, "Error: Invalid product price");
  assert.equal(bufferTwo[5], itemState, "Error: Invalid Item State");
  assert.equal(eventEmitted, true, "Error: ForSale event not emitted");
});

// 5th Test
it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
  // Declare and Initialize a variable for event
  let eventEmitted = false;
  await supplyChain.addDistributor(distributorID);
  // Watch the emitted event Sold()
  await supplyChain.Sold((err, res) => (eventEmitted = true));
  // Mark an item as Sold by calling function buyItem()
  await supplyChain.buyItem(upc, { from: distributorID, value: productPrice });
  itemState = 4;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[6], distributorID, "Error: Invalid distributerID");
  assert.equal(bufferTwo[5], itemState, "Error: Invalid Item State");
  assert.equal(eventEmitted, true, "Error: ForSale event not emitted");
});

// 6th Test
it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
  // Declare and Initialize a variable for event
  let eventEmitted = false;
  // Watch the emitted event Shipped()
  await supplyChain.Shipped((err, res) => (eventEmitted = true));
  // Mark an item as Sold by calling function shipItem()
  await supplyChain.shipItem(upc, { from: distributorID });
  itemState = 5;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[5], itemState, "Error: Invalid item state");
  assert.equal(eventEmitted, true, "Error: Shipped event not emmited");
});

// 7th Test
it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
  // Declare and Initialize a variable for event
  let eventEmitted = false;
  await supplyChain.addRetailer(retailerID);
  // Watch the emitted event Received()
  await supplyChain.Received((err, res) => (eventEmitted = true));
  // Mark an item as Sold by calling function buyItem()
  await supplyChain.receiveItem(upc, { from: retailerID });
  itemState = 6;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[7], retailerID, "Error: Invalid distributorID");
  assert.equal(bufferTwo[5], itemState, "Error: Invalid item State");
  assert.equal(eventEmitted, true, "Error: Received event not emitted");
});

// 8th Test
it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
  // Declare and Initialize a variable for event
  await supplyChain.addConsumer(consumerID);
  let eventEmitted = false;
  // Watch the emitted event Purchased()
  await supplyChain.Purchased((err, res) => (eventEmitted = true));
  // Mark an item as Sold by calling function buyItem()
  await supplyChain.purchaseItem(upc, { from: consumerID });
  itemState = 7;
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set
  assert.equal(bufferTwo[8], consumerID, "Error: Invalid consumerID");
  assert.equal(bufferTwo[5], itemState, "Error: Invalid item State");
  assert.equal(eventEmitted, true, "Error: Purchased event not emitted");
});

// 9th Test
it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferOne = await supplyChain.fetchItemBufferOne.call(upc);
  // Verify the result set:
  assert.equal(bufferOne[0], sku, "Error: Invalid item SKU");
  assert.equal(bufferOne[1], upc, "Error: Invalid item UPC");
  assert.equal(bufferOne[2], ownerID, "Error: Missing or Invalid ownerID");
  assert.equal(
    bufferOne[3],
    originFarmerID,
    "Error: Missing or Invalid originFarmerID"
  );
  assert.equal(
    bufferOne[4],
    originFarmName,
    "Error: Missing or Invalid originFarmName"
  );
  assert.equal(
    bufferOne[5],
    originFarmInformation,
    "Error: Missing or Invalid originFarmInformation"
  );
  assert.equal(
    bufferOne[6],
    originFarmLatitude,
    "Error: Missing or Invalid originFarmLatitude"
  );
  assert.equal(
    bufferOne[7],
    originFarmLongitude,
    "Error: Missing or Invalid originFarmLongitude"
  );
});

// 10th Test
it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
  // Retrieve the just now saved item from blockchain by calling function fetchItem()
  const bufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
  // Verify the result set:
  assert.equal(bufferTwo[0], sku, "Error: Invalid item SKU");
  assert.equal(bufferTwo[1], upc, "Error: Invalid item UPC");
  assert.equal(bufferTwo[2], productID, "Error: Invalid item productID");
  assert.equal(bufferTwo[3], productNotes, "Error: Invalid item productNotes");
  assert.equal(bufferTwo[4], productPrice, "Error: Invalid item productPrice");
  assert.equal(bufferTwo[5], itemState, "Error: Invalid item State");
  assert.equal(
    bufferTwo[6],
    distributorID,
    "Error: Invalid item distributorID"
  );
  assert.equal(bufferTwo[7], retailerID, "Error: Invalid item retailerID");
  assert.equal(bufferTwo[8], consumerID, "Error: Invalid item consumerID");
});
